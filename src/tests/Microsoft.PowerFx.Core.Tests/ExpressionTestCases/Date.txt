>> Date(-1, 2, 3)
#Error


>> Date(Blank(), 2, 3)
Blank()

// Previously: dates before 1900 get converted to post-1900
// New behavior: don't convert. 
>> Date(80, 1, 2)
Date(80,1,2)

// months and days overflow (but not for SQL)
>> Date(2000, 25, 69)
Date(2002,3,10)


>> Date(2000, 2, -1)
Date(2000,1,30)

>> Date(2000, -2, 1)
Date(1999,10,1)

>> Date(2000, -2, -1)
Date(1999,9,29)

>> Month(Date(2011,5,12))
5

>> Year(Date(2011,5,12))
2011

>> Day(Date(2011,5,12))
12

>> DateDiff(Date(2011,1,15) , Date(2011,1,30))
15

>> DateDiff(Date(-1, 2, 3), Date(2011,1,30))
#Error

>> DateDiff(Date(Blank(), 2, 3), Date(2011,1,30))
Blank()

>> DateDiff(Date(2011,1,15), Date(Blank(), 2, 3))
Blank()

>> DateDiff(Date(2011,1,15) , Date(2011,1,30), Blank())
15

>> DateDiff(Date(2013,1,15) , Date(2012,1,30))
-351

>> DateDiff(Date(2011,1,15) , Date(2011,1,30), TimeUnit.Days)
15

>> DateDiff(Date(2011,1,15) , Date(2011,1,30), "Days")
15

>> DateDiff(Date(2011,1,15) , Date(2011,1,30), "days")
15

>> DateDiff(Date(2011,1,15) , Date(2011,1,30), "DaYs")
15

>> DateDiff(Date(2013,1,15) , Date(2012,1,30), TimeUnit.Days)
-351

>> DateDiff(Date(2011,1,15) , Date(2011,1,30), "milliseconds")
1296000000

>> DateDiff(Date(2011,1,15) , Date(2011,1,30), "seconds")
1296000

>> DateDiff(Date(2011,1,15) , Date(2011,1,30), "minutes")
21600

>> DateDiff(Date(2011,1,15) , Date(2011,1,30), "hours")
360

>> DateDiff(Date(2011,1,15) , Date(2011,1,30), "quarters")
0

>> DateDiff(Date(2011,1,15) , Date(2011,7,30), "quarters")
2

>> DateDiff(Date(2011,1,15) , Date(2011,1,30), TimeUnit.Milliseconds)
1296000000

>> DateDiff(Date(2011,1,15) , Date(2011,1,30), TimeUnit.Seconds)
1296000

>> DateDiff(Date(2011,1,15) , Date(2011,1,30), TimeUnit.Minutes)
21600

>> DateDiff(Date(2011,1,15) , Date(2011,1,30), TimeUnit.Hours)
360

>> DateDiff(Date(2011,1,15) , Date(2011,1,30), TimeUnit.Quarters)
0

>> DateDiff(Date(2011,1,15) , Date(2011,7,30), TimeUnit.Quarters)
2

>> DateDiff(Date(2021,1,1), Date(2000,1,1), TimeUnit.Years)
-21

>> DateDiff(Date(2021,1,1), Date(2000,1,1), "Years")
-21

>> DateDiff(Date(2021,1,1), Date(2021,2,1), TimeUnit.Months)
1

>> DateDiff(Date(2021,1,1), Date(2021,2,1), "Months")
1

>> DateDiff(Date(2021,1,1), Date(2021,1,20), TimeUnit.Months)
0

// Leap year 
>> DateAdd(Date(2012,2,28), 1)
Date(2012,2,29)

>> DateAdd(Date(2013,2,28), 1)
Date(2013,3,1)

>> Day(DateAdd(Date(2012,2,28), 1))
29

>> Month(DateAdd(Date(2013,2,28), 1))
3

// Date comparisons
>> Date(2011,1,15) < Date(2011,1,30)
true

>> Date(2011,1,15) < Date(2011,1,15)
false

>> Date(2011,1,15) <= Date(2011,1,30)
true

>> Date(2011,1,15) <= Date(2011,1,15)
true

>> Date(2011,1,30) < Date(2011,1,15)
false

>> Date(2011,1,30) <= Date(2011,1,15)
false

>> Date(2011,1,15) > Date(2011,1,30)
false

>> Date(2011,1,15) > Date(2011,1,15)
false

>> Date(2011,1,15) >= Date(2011,1,30)
false

>> Date(2011,1,15) >= Date(2011,1,15)
true

>> Date(2011,1,30) > Date(2011,1,15)
true

>> Date(2011,1,30) >= Date(2011,1,15)
true

// DateTime comparisons
>> DateAdd(Date(2011,1,15), 3) < DateAdd(Date(2011,1,30), 3)
true

>> DateAdd(Date(2011,1,15), 3) < DateAdd(Date(2011,1,15), 3)
false

>> DateAdd(Date(2011,1,15), 3) <= DateAdd(Date(2011,1,30), 3)
true

>> DateAdd(Date(2011,1,15), 3) <= DateAdd(Date(2011,1,15), 3)
true

>> DateAdd(Date(2011,1,30), 3) < DateAdd(Date(2011,1,15), 3)
false

>> DateAdd(Date(2011,1,30), 3) <= DateAdd(Date(2011,1,15), 3)
false

>> DateAdd(Date(2011,1,15), 3) > DateAdd(Date(2011,1,30), 3)
false

>> DateAdd(Date(2011,1,15), 3) > DateAdd(Date(2011,1,15), 3)
false

>> DateAdd(Date(2011,1,15), 3) >= DateAdd(Date(2011,1,30), 3)
false

>> DateAdd(Date(2011,1,15), 3) >= DateAdd(Date(2011,1,15), 3)
true

>> DateAdd(Date(2011,1,30), 3) > DateAdd(Date(2011,1,15), 3)
true

>> DateAdd(Date(2011,1,30), 3) >= DateAdd(Date(2011,1,15), 3)
true

// Blank Date comparisons
// SQL Null comparisons are always false
>> Date(Blank(), 2, 3) < Date(2011,1,30)
true

>> Date(Blank(), 2, 3) <= Date(2011,1,30)
true

>> Date(Blank(), 2, 3) > Date(2011,1,30)
false

>> Date(Blank(), 2, 3) >= Date(2011,1,30)
false

// Blank DateTime comparisons
>> DateAdd(Date(Blank(), 2, 3), 3) < DateAdd(Date(2011,1,30), 3)
true

>> DateAdd(Date(Blank(), 2, 3), 3) <= DateAdd(Date(2011,1,30), 3)
true

>> DateAdd(Date(Blank(), 2, 3), 3) > DateAdd(Date(2011,1,30), 3)
false

>> DateAdd(Date(Blank(), 2, 3), 3) >= DateAdd(Date(2011,1,30), 3)
false

// Error Date comparisons
>> Date(1/0, 2, 3) < Date(2011,1,30)
#Error

>> Date(1/0, 2, 3) <= Date(2011,1,30)
#Error

>> Date(1/0, 2, 3) > Date(2011,1,30)
#Error

>> Date(1/0, 2, 3) >= Date(2011,1,30)
#Error

// Error DateTime comparisons
>> DateAdd(Date(1/0, 2, 3), 3) < DateAdd(Date(2011,1,30), 3)
#Error

>> DateAdd(Date(1/0, 2, 3), 3) <= DateAdd(Date(2011,1,30), 3)
#Error

>> DateAdd(Date(1/0, 2, 3), 3) > DateAdd(Date(2011,1,30), 3)
#Error

>> DateAdd(Date(1/0, 2, 3), 3) >= DateAdd(Date(2011,1,30), 3)
#Error

>> Date(2001,2,14) = Date(2001,2,14)
true

// date add and part
>> Day(DateAdd(Date(2001,1,1), 3))
4

>> Day(DateAdd(Date(2001,1,1), 3, Blank()))
4

>> Day(DateAdd(Date(2001,1,1), Blank()))
1

>> DateAdd(Date(-1, 2, 3), 3)
#Error

>> DateAdd(Date(Blank(), 2, 3), 3)
Blank()

>> Day(DateAdd(Date(2001,1,1), 4, TimeUnit.Days))
5

>> DateAdd(Date(2011,1,15), 100000000, "milliseconds")
Date(2011,1,16)

>> DateAdd(Date(2011,1,15), 100000000, TimeUnit.Milliseconds)
Date(2011,1,16)

// DateAddDay tests
>> Day(Date(2011,1,15) + 1)
16

>> Day(1 + Date(2011,1,15))
16

>> Day(Date(2011,1,15) - 1)
14

// DateTimeAddDay tests
>> Day((Date(2011,1,15) + 1) + 1)
17

>> Day((1 + Date(2011,1,15)) + 1)
17

>> Day((Date(2011,1,15) - 1) - 1)
13

>> Day(Date(-1, 2, 3))
#Error

>> Day(Blank())
0

>> Month(DateAdd(Date(2001,1,1), 12, TimeUnit.Months))
1

>> Month(DateAdd(Date(2001,1,1), 3, TimeUnit.Quarters))
10

>> Month(DateAdd(Date(2001,1,1), 3, "Quarters"))
10

>> Month(DateAdd(Date(2001,1,1), 3, "quarters"))
10

>> Month(DateAdd(Date(2001,1,1), 3, "quaRTers"))
10

>> Month(Date(-1, 2, 3))
#Error

>> Month(Blank())
1

>> Year(DateAdd(Date(2001,1,1), 1, TimeUnit.Years))
2002

>> Year(Date(-1, 2, 3))
#Error

>> Year(Blank())
1900

// Excel-style date math
>> Date(2001, 2, 14) + 2
Date(2001,2,16)

// Date difference
>> Date(2022, 1, 30) - Date(2022, 1, 15)
15

>> Date(2022, 1, 15) - Date(2022, 1, 30)
-15

>> Date(2022, 1/0, 15) - Date(2022, 1, 30)
#Error(Kind=Div0)


// ******** INTEGER PARAMETERS ********

// Absolute Year Parameter
>> Date(1960,7,31)
Date(1960,7,31)

//Relative Year Parameter: 1900+YearValue
>> Date(100,1,1)
Date(2000,1,1)

>> Date(76,7,4)
Date(1976,7,4)

// Out-of-range Year Parameter (Year value less than 0 or more than 9999)
>> Date(-1,1,1)
#Error(Kind=InvalidArgument)

>> Date(10000,1,1)
#Error(Kind=InvalidArgument)

// Out-of-range Month Parameter (Month value less than 1 or more than 12)
>> Date(1933,0,25)
Date(1932,12,25)

>> Date(2012,13,14)
Date(2013,1,14)

>> Date(1933,-5,25)
Date(1932,7,25)

>> Date(1933,30,25)
Date(1935,6,25)

// Out-of-range Date Parameter (Date value either less than 1 or more than number of days in specified month)

>> Date(2118,4,0)
Date(2118,3,31)

>> Date(2012,7,32)
Date(2012,8,1)

>> Date(2012,7,-20)
Date(2012,6,10)

>> Date(2012,7,100)
Date(2012,10,8)

// 0 as Year,Month and Date value
>> Date(0,0,0)
Date(1899,11,30)


// ******** DECIMAL PARAMETERS ********

>> Date(1900.67,2.7,12.2)
Date(1900,2,12)


// ******** NULL and ERROR PARAMETERS ********

// Excel considers 1900 as default year when passed blank year and returns 11/29/1900 for above parameters
>> Date(Blank(),11,29)
Blank()

// Excel considers 12 as default month when passed blank month and returns 12/14/1975 for above parameters
>> Date(1975,Blank(),14)
Blank()

// Excel considers 0 as default day parameter when passed blank day and returns 9/30/1975 for above parameters
>> Date(1975,10,Blank())
Blank()

// Excel returns #NUM error on passing all the blank arguments
>> Date(Blank(),Blank(),Blank())
Blank()

>> Date(1/0, 11, 29)
#Error(Kind=Div0)

>> Date(1975,1/0,14)
#Error(Kind=Div0)

>> Date(1975,10,1/0)
#Error(Kind=Div0)

>> Date(-1,1,1/0)
#Error(Kind=Div0)

// ******** STRING PARAMETERS ********

>> Date("a","b","c")
#Error(Kind=InvalidArgument)

>> Date("1900","5","14")
Date(1900,5,14)


// ******** BOOLEAN AND STRING PARAMETERS ********

>> Date("1900",true,true)
Date(1900,1,1)

>> Date("1975",true,false)
Date(1974,12,31)

>> Date("1975",false,false)
Date(1974,11,30)

>> Date(true,true,true)
Date(1901,1,1)

//Excel returns Error for above parameters, while PowerFx considers above as Date(0,0,0) and returns the expected value
>> Date(false,false,false)
Date(1899,11,30)

>> Date("1975","true","false")
#Error(Kind=InvalidArgument)


// ******** FUNCTION VALUE AS PARAMETERS ********

>> Date(Year("11/29/2022"),10,18)
Date(2022,10,18)

>> Date(1960, Month("11/29/2022"),17)
Date(1960,11,17)

>> Date(1960,6,Day("11/29/2022"))
Date(1960,6,29)

