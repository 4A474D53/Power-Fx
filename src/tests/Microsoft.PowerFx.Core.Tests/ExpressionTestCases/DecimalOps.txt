// decimal op decimal -> decimal
1.0000000000000000000000001 * 2
1.0000000000000000000000001 / 2
1.0000000000000000000000001 - 2
1.0000000000000000000000001 + 2
1.0000000000000000000000001 = 1
1.0000000000000000000000001 <> 1
1.0000000000000000000000001 > 1
1.0000000000000000000000001 < 1
1.0000000000000000000000001 >= 1
1.0000000000000000000000001 <= 1
1.0000000000000000000000001%
-1.0000000000000000000000001
2 * 1.0000000000000000000000001
2 / 1.0000000000000000000000001
2 - 1.0000000000000000000000001
2 + 1.0000000000000000000000001
1 = 1.0000000000000000000000001 
1 <> 1.0000000000000000000000001
1 > 1.0000000000000000000000001 
1 < 1.0000000000000000000000001
1 >= 1.0000000000000000000000001 
1 <= 1.0000000000000000000000001
2 = 1.0000000000000000000000001 
2 <> 1.0000000000000000000000001
2 > 1.0000000000000000000000001 
2 < 1.0000000000000000000000001
2 >= 1.0000000000000000000000001 
2 <= 1.0000000000000000000000001
// decimal op string -> decimal
1.0000000000000000000000001 * "2"
1.0000000000000000000000001 / "2"
1.0000000000000000000000001 - "2"
1.0000000000000000000000001 + "2"
// Decimal TODO: What is our story on =/<> here?  Warning in Canvas?  Other comparison ops don't work
1.0000000000000000000000001 = "1"
1.0000000000000000000000001 <> "1"
//1.0000000000000000000000001 > "1"
//1.0000000000000000000000001 < "1"
//1.0000000000000000000000001 >= "1"
//1.0000000000000000000000001 <= "1"
"1.0000000000000000000000001"%
-"1.0000000000000000000000001"
"2" * 1.0000000000000000000000001
"2" / 1.0000000000000000000000001
"2" - 1.0000000000000000000000001
"2" + 1.0000000000000000000000001
"1" = 1.0000000000000000000000001 
//"1" <> 1.0000000000000000000000001
//"1" > 1.0000000000000000000000001 
//"1" < 1.0000000000000000000000001
//"1" >= 1.0000000000000000000000001 
//"1" <= 1.0000000000000000000000001
"2" = 1.0000000000000000000000001 
"2" <> 1.0000000000000000000000001
//"2" > 1.0000000000000000000000001 
//"2" < 1.0000000000000000000000001
//"2" >= 1.0000000000000000000000001 
//"2" <= 1.0000000000000000000000001
// decimal op boolean -> decimal
1.0000000000000000000000001 * true
1.0000000000000000000000001 / true
1.0000000000000000000000001 - true
1.0000000000000000000000001 + true
true%
true% * 1.0000000000000000000000001
-true
(-true) * 1.0000000000000000000000001
true * 1.0000000000000000000000001
true / 1.0000000000000000000000001
true - 1.0000000000000000000000001
true + 1.0000000000000000000000001
true = 1.0000000000000000000000001
true <> 1.0000000000000000000000001
//true > 1.0000000000000000000000001 
//true < 1.0000000000000000000000001
//true >= 1.0000000000000000000000001 
//true <= 1.0000000000000000000000001
true = 1
true <> 1
//true > 1
//true < 1
//true >= 1
//true <= 1
//false = 1.0000000000000000000000001 
false <> 1.0000000000000000000000001
//false > 1.0000000000000000000000001 
//false < 1.0000000000000000000000001
//false >= 1.0000000000000000000000001 
//false <= 1.0000000000000000000000001
//false = 0.0000000000000000000000001 
//false <> 0.0000000000000000000000001
//false > 0.0000000000000000000000001 
//false < 0.0000000000000000000000001
//false >= 0.0000000000000000000000001 
//false <= 0.0000000000000000000000001
false = 0
false <> 0
//false > 0
//false < 0
//false >= 0
//false <= 0
// decimal op untyped -> decimal
1.0000000000000000000000001 * ParseJSON("2")
1.0000000000000000000000001 / ParseJSON("2")
1.0000000000000000000000001 - ParseJSON("2")
1.0000000000000000000000001 + ParseJSON("2")
1.0000000000000000000000001 = ParseJSON("1")
1.0000000000000000000000001 <> ParseJSON("1")
1.0000000000000000000000001 > ParseJSON("1")
1.0000000000000000000000001 < ParseJSON("1")
1.0000000000000000000000001 >= ParseJSON("1")
1.0000000000000000000000001 <= ParseJSON("1")
ParseJSON("2")%
ParseJSON("2")% * 1.0000000000000000000000001
-ParseJSON("2")
(-ParseJSON("2")) * 1.0000000000000000000000001
ParseJSON("2") * 1.0000000000000000000000001
ParseJSON("2") / 1.0000000000000000000000001
ParseJSON("2") - 1.0000000000000000000000001
ParseJSON("2") + 1.0000000000000000000000001
ParseJSON("1") = 1.0000000000000000000000001 
ParseJSON("1") <> 1.0000000000000000000000001
ParseJSON("1") > 1.0000000000000000000000001 
ParseJSON("1") < 1.0000000000000000000000001
ParseJSON("1") >= 1.0000000000000000000000001 
ParseJSON("1") <= 1.0000000000000000000000001
ParseJSON("2") = 1.0000000000000000000000001 
ParseJSON("2") <> 1.0000000000000000000000001
ParseJSON("2") > 1.0000000000000000000000001 
ParseJSON("2") < 1.0000000000000000000000001
ParseJSON("2") >= 1.0000000000000000000000001 
ParseJSON("2") <= 1.0000000000000000000000001
// decimal op datetime -> number
1.0000000000000000000000001 * Date(1900,1,1)
1.0000000000000000000000001 / Date(1900,1,1)
// 1.0000000000000000000000001 - Date(1900,1,1)   // Decimal TODO: SubtractNumberAndDate in LibraryOperators.cs is unimplemented?  Works in Canvas?
1.0000000000000000000000001 + Date(1900,1,1)
1.0000000000000000000000001 = Date(1900,1,1)
1.0000000000000000000000001 <> Date(1900,1,1)
1.0000000000000000000000001 > Date(1900,1,1)
1.0000000000000000000000001 < Date(1900,1,1)
1.0000000000000000000000001 >= Date(1900,1,1)
1.0000000000000000000000001 <= Date(1900,1,1)
1.0000000000000000000000001 = Date(1900,1,0)
1.0000000000000000000000001 <> Date(1900,1,0)
1.0000000000000000000000001 > Date(1900,1,0)
1.0000000000000000000000001 < Date(1900,1,0)
1.0000000000000000000000001 >= Date(1900,1,0)
1.0000000000000000000000001 <= Date(1900,1,0)
Date(1900,1,1)%
Date(1900,1,1)% * 1.0000000000000000000000001
//-Date(1900,1,1) -- issue https://github.com/microsoft/Power-Fx/issues/1176
//(-Date(1900,1,1)) * 1.0000000000000000000000001 -- issue https://github.com/microsoft/Power-Fx/issues/1176
Date(1900,1,1) * 1.0000000000000000000000001
Date(1900,1,1) / 1.0000000000000000000000001
Date(1900,1,1) - 1.0000000000000000000000001
Date(1900,1,1) + 1.0000000000000000000000001
Date(1900,1,1) = 1.0000000000000000000000001 
Date(1900,1,1) <> 1.0000000000000000000000001
Date(1900,1,1) > 1.0000000000000000000000001 
Date(1900,1,1) < 1.0000000000000000000000001
Date(1900,1,1) >= 1.0000000000000000000000001 
Date(1900,1,1) <= 1.0000000000000000000000001
Date(1900,1,0) = 1.0000000000000000000000001 
Date(1900,1,0) <> 1.0000000000000000000000001
Date(1900,1,0) > 1.0000000000000000000000001 
Date(1900,1,0) < 1.0000000000000000000000001
Date(1900,1,0) >= 1.0000000000000000000000001 
Date(1900,1,0) <= 1.0000000000000000000000001
// decimal op datetime -> number
1.0000000000000000000000001 * DateTime(1900,1,1,12,0,0)
1.0000000000000000000000001 / DateTime(1900,1,1,12,0,0)
//1.0000000000000000000000001 - DateTime(1900,1,1,12,0,0)   // Decimal TODO: SubtractNumberAndDate in LibraryOperators.cs is unimplemented?  Works in Canvas?
1.0000000000000000000000001 + DateTime(1900,1,1,12,0,0)
DateTime(1900,1,1,12,0,0)%
DateTime(1900,1,1,12,0,0)% * 1.0000000000000000000000001
//-DateTime(1900,1,1,12,0,0) -- issue https://github.com/microsoft/Power-Fx/issues/1176
// (-DateTime(1900,1,1,12,0,0)) * 1.0000000000000000000000001 -- issue https://github.com/microsoft/Power-Fx/issues/1176
DateTime(1900,1,1,12,0,0) * 1.0000000000000000000000001
DateTime(1900,1,1,12,0,0) / 1.0000000000000000000000001
DateTime(1900,1,1,12,0,0) - 1.0000000000000000000000001
DateTime(1900,1,1,12,0,0) + 1.0000000000000000000000001
DateTime(1900,1,1,0,0,0) = 1.0000000000000000000000001 
DateTime(1900,1,1,0,0,0) <> 1.0000000000000000000000001
DateTime(1900,1,1,0,0,0) > 1.0000000000000000000000001 
DateTime(1900,1,1,0,0,0) < 1.0000000000000000000000001
DateTime(1900,1,1,0,0,0) >= 1.0000000000000000000000001 
DateTime(1900,1,1,0,0,0) <= 1.0000000000000000000000001
DateTime(1900,1,0,0,0,0) = 1.0000000000000000000000001 
DateTime(1900,1,0,0,0,0) <> 1.0000000000000000000000001
DateTime(1900,1,0,0,0,0) > 1.0000000000000000000000001 
DateTime(1900,1,0,0,0,0) < 1.0000000000000000000000001
DateTime(1900,1,0,0,0,0) >= 1.0000000000000000000000001 
DateTime(1900,1,0,0,0,0) <= 1.0000000000000000000000001
// decimal op blank -> decimal
1.0000000000000000000000001 * Blank()
1.0000000000000000000000001 / Blank()
1.0000000000000000000000001 - Blank()
1.0000000000000000000000001 + Blank()
Blank()%
Blank()% + 1.0000000000000000000000001
-Blank()
(-Blank()) + 1.0000000000000000000000001 
Blank() * 1.0000000000000000000000001
Blank() / 1.0000000000000000000000001
Blank() - 1.0000000000000000000000001
Blank() + 1.0000000000000000000000001
Blank() = 1.0000000000000000000000001 
Blank() <> 1.0000000000000000000000001
Blank() > 1.0000000000000000000000001 
Blank() < 1.0000000000000000000000001
Blank() >= 1.0000000000000000000000001 
Blank() <= 1.0000000000000000000000001
Blank() = 1.0000000000000000000000001 
Blank() <> 1.0000000000000000000000001
Blank() > 1.0000000000000000000000001 
Blank() < 1.0000000000000000000000001
Blank() >= 1.0000000000000000000000001 
Blank() <= 1.0000000000000000000000001
Blank() = 0.0000000000000000000000001 
Blank() <> 0.0000000000000000000000001
Blank() > 0.0000000000000000000000001 
Blank() < 0.0000000000000000000000001
Blank() >= 0.0000000000000000000000001 
Blank() <= 0.0000000000000000000000001
Blank() = 0.0000000000000000000000001 
Blank() <> 0.0000000000000000000000001
Blank() > 0.0000000000000000000000001 
Blank() < 0.0000000000000000000000001
Blank() >= 0.0000000000000000000000001 
Blank() <= 0.0000000000000000000000001
Blank() = 0
Blank() <> 0
Blank() > 0
Blank() < 0
Blank() >= 0
Blank() <= 0
Blank() = 0
Blank() <> 0
Blank() > 0
Blank() < 0
Blank() >= 0
Blank() <= 0
// scientific notation works with decimal, does not imply floating point
1.000000000000000000000001e2 + 1
1 + 1.000000000000000000000001e2











