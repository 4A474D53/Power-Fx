// decimal aware aggregate functions
Sum( 1.0000000000000000000000001, 2.0000000000000000000000002)
Sum( [1.0000000000000000000000001, 2.0000000000000000000000002], Value )
Average( 1.0000000000000000000000001, 2.0000000000000000000000002 )
Average( [1.0000000000000000000000001, 2.0000000000000000000000002], Value )
Min( 1.0000000000000000000000001, 2.0000000000000000000000002 )
Min( [1.0000000000000000000000001, 2.0000000000000000000000002], Value )
Max( 1.0000000000000000000000001, 2.0000000000000000000000002 )
Max( [1.0000000000000000000000001, 2.0000000000000000000000002], Value )
// decimal aware aggregate functions with mixed inputs -> float
Sum( 1.0000000000000000000000001, 2.0000000000000000000000002, Float(3))
Sum( [1.0000000000000000000000001, 2.0000000000000000000000002, Float(3)], Value )
Average( 1.0000000000000000000000001, 2.0000000000000000000000002, Float(3) )
Average( [1.0000000000000000000000001, 2.0000000000000000000000002, Float(3)], Value )
Min( 1.0000000000000000000000001, 2.0000000000000000000000002, Float(3) )
Min( [1.0000000000000000000000001, 2.0000000000000000000000002, Float(3)], Value )
Max( 1.0000000000000000000000001, 2.0000000000000000000000002, Float(3) )
Max( [1.0000000000000000000000001, 2.0000000000000000000000002, Float(3)], Value )
// non-decimal aware aggregate functions
VarP( 1.0000000000000000000000001, 2.0000000000000000000000002)
VarP( [1.0000000000000000000000001, 2.0000000000000000000000002], Value )
StdevP( 1.0000000000000000000000001, 2.0000000000000000000000002)
StdevP( [1.0000000000000000000000001, 2.0000000000000000000000002], Value )
// decimal aware numeric functions
Int( 1000000000000000000000001.1 )
Int( -1000000000000000000000001.1 )
Int( [1000000000000000000000001.1, 2000000000000000000000002.2] )
Int( [10000000000000000000000001, 20000000000000000000000002, Float(1)] )
Trunc( 1000000000000000000000001.1 )
Trunc( [1000000000000000000000001.1, 2000000000000000000000002.2] )
Trunc( [1000000000000000000000001.1, 2000000000000000000000002.2, Float(1)] )
Round( 1000000000000000000000001.1, 2 )
Round( [1000000000000000000000001.1, 2000000000000000000000002.2], 2 )
Round( 1000000000000000000000001.1, Float(2) )
Round( [1000000000000000000000001.1, 2000000000000000000000002.2], Float(2) )
RoundUp( 1000000000000000000000001.1, 2 )
RoundUp( [1000000000000000000000001.1, 2000000000000000000000002.2], 2 )
RoundUp( 1000000000000000000000001.1, Float(2) )
RoundUp( [1000000000000000000000001.1, 2000000000000000000000002.2], Float(2) )
RoundDown( 1000000000000000000000001.1, 2 )
RoundDown( [1000000000000000000000001.1, 2000000000000000000000002.2], 2 )
RoundDown( 1000000000000000000000001.1, Float(2) )
RoundDown( [1000000000000000000000001.1, 2000000000000000000000002.2], Float(2) )
Abs( 10000000000000000000000001 )
Abs( -10000000000000000000000001 )
Abs( [10000000000000000000000001, 20000000000000000000000002, -10000000000000000000000001, -20000000000000000000000002])
Abs( [10000000000000000000000001, 20000000000000000000000002, -10000000000000000000000001, -20000000000000000000000002, Float(1)])
// non-decimal aware numeric functions
Sqrt( 1524157899404237160815376 )         // exact square of 1234567899876, should be done in float and match next test
Sqrt( Float(1524157899404237160815376) )  // exact square of 1234567899876
Sqrt( 4.000000000000000004 )              // outside of float range, will round to 4
Sqrt( 4.0000000004 )                      // within float range
Log( 100, 10 )
Log( 10000000000000050000000, 10 )         // input will be rounded with float conversion
Log( 10000000000000050000000, Float(10) )
Log( 10000000000000000000000, 10 )         // above tests should match these answers
Log( 10000000000000000000000, Float(10) )  
Log( Float("1e100"), 10 )
// exp
// ln
Cos( 0 )
Cos( [0] )
Sin( 0 )
Sin( [0] )
// Cot
// Sin
// Tan
// Acos
// Acot
// Asin
// Atan
// Atan2
// Degrees
// Radians
Pi()

Power( 2.0000000000000000000000002, 2.0000000000000000000000002)
2.0000000000000000000000002 ^ 2.0000000000000000000000002
// Decimal and Float functions
Value( 1e100 )
Decimal( 1e100 )
Float( 1e100 )
Value( "1e100" )
Decimal( "1e100" )
Float( "1e100" )
Value( true )
Decimal( true )
Float( true )
Decimal( "12,00000000000000000000003", "Fr-fr" )
Float( "12,00000000000000000000003", "Fr-fr" )
Value( "12,00000000000000000000003", "Fr-fr" )
Decimal( ParseJSON("""12,00000000000000000000003"""), "Fr-fr" )
Float( ParseJSON("""12,00000000000000000000003"""), "Fr-fr" )
Value( ParseJSON("""12,00000000000000000000003"""), "Fr-fr" )
// ParseJSON
Decimal( ParseJSON("12.00000000000000000000003") )
Float( ParseJSON("12.00000000000000000000003") )
Value( ParseJSON("12.00000000000000000000003") )
Decimal( Index( ParseJSON("[1e300,12.00000000000000000000003]"), 2 ) )
Float( Index( ParseJSON("[1e300,12.00000000000000000000003]"), 2 ) )
Value( Index( ParseJSON("[1e300,12.00000000000000000000003]"), 2 ) )
Decimal( ParseJSON("{""a"":12.00000000000000000000003}").a )
Float( ParseJSON("{""a"":12.00000000000000000000003}").a )
Value( ParseJSON("{""a"":12.00000000000000000000003}").a )
