steps:
- task: DownloadBuildArtifacts@0
  displayName: 'Download compat results artifact'
  inputs:
    downloadType: specific
    itemPattern: '**\*.txt'
    downloadPath: '$(System.ArtifactsDirectory)\ApiCompat'

- task: CopyFiles@2
  displayName: 'Copy results for publish to Artifacts'
  inputs:
    SourceFolder: '$(System.ArtifactsDirectory)\ApiCompat'
    Contents: '**\*.txt'
    TargetFolder: '$(System.ArtifactsDirectory)\ApiCompatibilityResults'
    flattenFolders: true

- task: PublishPipelineArtifact@1
  inputs:
    artifactName: 'ApiCompatibilityResults'
    targetPath: '$(System.ArtifactsDirectory)\ApiCompatibilityResults'
  displayName: 'Publish compat results to Artifacts'
  continueOnError: true

- powershell: |
    $OWNER = 'microsoft';
    $REPO = 'Power-Fx';
    $ISSUE_NUMBER = $(System.PullRequest.PullRequestNumber);
    $stringToMatch = "*Binary Compatibility*";

    $listCommentsUri = "https://api.github.com/repos/$OWNER/$REPO/issues/$ISSUE_NUMBER/comments";

    $listResult = Invoke-RestMethod "$listCommentsUri";

    $compatComments = ($listResult | Where-Object {$_.body -like $stringToMatch});
    $count = $compatComments.count

    if ($count -gt 0) {
        $oldestCompatComment = $compatComments[0];
        $COMMENT_ID = $oldestCompatComment.id;
        $date = $oldestCompatComment.created_at;

        Write-Host "Deleting comment $COMMENT_ID dated $date";

        $githubPersonalAccessToken = $(GitHubCommentApiKey);

        $token = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes(":$githubPersonalAccessToken"));
        $header = @{authorization = "Basic $token"};

        $deleteCommentUri = "https://api.github.com/repos/$OWNER/$REPO/issues/comments/$COMMENT_ID";

        Invoke-RestMethod -Method Delete -Uri $deleteCommentUri -Headers $header;
    } else {
        Write-Host "Nothing to delete.";
    }
  displayName: 'Delete old compat results'
  condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'), ne(variables['System.PullRequest.IsFork'], 'True'))

- task: SOUTHWORKS.github-pr-comment.custom-publish-comment-task.github-pr-comment@0
  displayName: 'Publish compat results to GitHub'
  inputs:
    userToken: '$(GitHubCommentApiKey)'
    bodyFilePath: '$(System.ArtifactsDirectory)\ApiCompat'
    getSubFolders: true
  # Skip forks, as secret tokens are not available to them.
  condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'), ne(variables['System.PullRequest.IsFork'], 'True'))

- script: |
   cd ..
   dir /s
  displayName: 'Dir workspace'
  continueOnError: true
  condition: succeededOrFailed()
